{# Codegen for CPU #}

{% macro util_methods() %}
template <typename T>
T* alloc_mem(const size_type n) {
  const auto alloc_size = sizeof(T) * n;
  T* ret = static_cast<T*>(std::malloc(alloc_size));
  assert(ret != nullptr);

  #pragma omp parallel for
  for (size_type i = 0; i < n; i++) {
    ret[i] = 0;
  }

  return ret;
}

template <typename T>
void free_mem(T **p) {
  if (p == nullptr || *p == nullptr) {
    return;
  }
  std::free(*p);
  *p = nullptr;
}

template <typename T>
T get_attribute(const H5::H5File &file, const char* attr_name) {
    T ret;
    const H5::Attribute attr = file.openAttribute(attr_name);
    attr.read(attr.getDataType(), &ret);
    return ret;
}

template <typename T>
void read_dataset(const H5::H5File &file, const char* dataset_name, const H5::PredType& h5_type, const size_type count, T *const out) {
    const H5::DataSet dataset = file.openDataSet(dataset_name);

    // Ensure datatype is correct
    const H5::DataType dataset_type = dataset.getDataType();
    assert(dataset_type == h5_type);

    // Ensure count is correct
    const H5::DataSpace dataspace = dataset.getSpace();
    const auto ndims = dataspace.getSimpleExtentNdims();
    std::vector<hsize_t> dims(ndims);
    dataspace.getSimpleExtentDims(&dims[0]);
    assert(dims.size() == 1);
    assert(dims[0] == count);

    dataset.read(out, h5_type);
}

struct rnd_state {
    rnd_state_type* rnd;

    rnd_state():
    rnd{nullptr} {
        auto num_threads = omp_get_max_threads();
        rnd = static_cast<rnd_state_type*>(std::malloc(sizeof(rnd_state_type) * num_threads));

        std::random_device rd;
        auto const now = std::chrono::system_clock::now();
        auto const now_t = std::chrono::system_clock::to_time_t(now);
        #pragma omp parallel
        {
            const auto thread_idx = omp_get_thread_num();

            rnd_state_type gen(rd());
            gen.seed(now_t + thread_idx);
            rnd[thread_idx] = gen;
        }
    }

    ~rnd_state() {
        std::free(rnd);
        rnd = nullptr;
    }
};

struct thread_node_range {
  size_type* ptr;

  thread_node_range(edge_index_type* indptr, size_type num_nodes, size_type num_threads):
  ptr{nullptr} {
    ptr = alloc_mem<size_type>(num_threads + 1);

    edge_index_type *cum_in_neighbors = alloc_mem<edge_index_type>(num_nodes);
    size_type total_load = 0;
    for (size_type i = 0; i < num_nodes; i++) {
        total_load += indptr[i+1] - indptr[i];
        cum_in_neighbors[i] = total_load;
    }

    auto thread_load = total_load / num_threads;
    thread_load += (total_load % num_threads != 0);
    ptr[0] = 0;

    #pragma omp parallel
    {
	const auto thread_idx = omp_get_thread_num();
	auto needle = thread_load * (thread_idx + 1);
	if (needle > total_load) {
	    needle = total_load;
	}

	auto end = std::upper_bound(cum_in_neighbors, cum_in_neighbors + num_nodes, needle);
	ptr[thread_idx + 1] = end - cum_in_neighbors;
    }

    assert(ptr[0] == 0);
    assert(ptr[num_threads] == num_nodes);
    for (size_type i = 0; i < num_threads; i++) {
        assert(ptr[i] <= ptr[i+1]);
    }

    free_mem(&cum_in_neighbors);
  }

  size_type start(size_type thread_idx) const { return ptr[thread_idx]; };
  size_type end(size_type thread_idx) const { return ptr[thread_idx + 1]; };

  ~thread_node_range() {
    free_mem(&ptr);
  }
};

struct thread_edge_range {
  size_type* ptr;

  thread_edge_range(size_type num_edges, size_type num_threads):
  ptr{nullptr} {
    ptr = alloc_mem<size_type>(num_threads + 1);

    auto thread_load = num_edges / num_threads;
    thread_load += (num_edges % num_threads != 0);

    ptr[0] = 0;
    #pragma omp parallel
    {
	const auto thread_idx = omp_get_thread_num();
	auto end = thread_load * (thread_idx + 1);
	if (end > num_edges) {
	    end = num_edges;
	}
	ptr[thread_idx +1] = end;
    }

    assert(ptr[0] == 0);
    assert(ptr[num_threads] == num_edges);
    for (size_type i = 0; i < num_threads; i++) {
        assert(ptr[i] <= ptr[i+1]);
    }

  }

  size_type start(size_type thread_idx) const { return ptr[thread_idx]; };
  size_type end(size_type thread_idx) const { return ptr[thread_idx + 1]; };

  ~thread_edge_range() {
    free_mem(&ptr);
  }
};
{% endmacro %}

{% macro enum_type(t) %}
{{ t.line }}
typedef {{ t.base_type }} {{ t.name }};
{% for const in t.consts %}
const {{ t.name }} {{ const }} = {{ loop.index0 }};
{% endfor %}
{% endmacro %}

{% macro config(c) %}
{{ c.line }}
{{ c.type }} {{ c.name }} = {{ c.default }};
{% endmacro %}

{% macro global_variable(v) %}
{{ v.line }}
{{ v.type }} {{ v.var }} = {{ v.init }};
{% endmacro %}

{% macro in_inc_csr(a) %}
struct in_inc_csr {
    {{ a.indptr.type }}* indptr;

    in_inc_csr(const H5::H5File &file, const size_type num_nodes):
    indptr{nullptr} {
        indptr = alloc_mem<{{ a.indptr.type }}>(num_nodes + 1);
        read_dataset(file, "{{ a.indptr.dataset_name }}", {{ a.indptr.h5_type}}, num_nodes + 1, indptr);
    }

    in_inc_csr() = delete;                              // default constructor
    in_inc_csr(const in_inc_csr &) = delete;            // copy constructor
    in_inc_csr(in_inc_csr &&) = delete;                 // move constructor
    in_inc_csr &operator=(const in_inc_csr &) = delete; // copy assignment
    in_inc_csr &operator=(in_inc_csr &&) = delete;      // move assignment

    ~in_inc_csr() {
        free_mem(&indptr);
    }
} ;
{% endmacro %}

{% macro node_table(t) %}
size_type get_num_nodes(const H5::H5File &file) {
    return get_attribute<size_type>(file, "num_nodes");
}

struct node_table {
    {% for f in t.fields %}
    {{ f.type }}* {{ f.name }};
    {% endfor %}

    node_table(const H5::H5File &file, const size_type num_nodes):
    {% set comma = joiner(",") %}
    {% for f in t.fields %}
    {{ comma() }}{{ f.name }}{nullptr}
    {% endfor %}
    {
        {% for f in t.fields %}
        {{ f.name }} = alloc_mem<{{ f.type }}>(num_nodes);
        {% endfor %}

        {% for f in t.fields %}
        {% if f.is_static %}
        read_dataset(file, "{{ f.dataset_name }}", {{ f.h5_type}}, num_nodes, {{ f.name }});
        {% endif %}
        {% endfor %}
    }

    node_table() = delete;                              // default constructor
    node_table(const node_table &) = delete;            // copy constructor
    node_table(node_table &&) = delete;                 // move constructor
    node_table &operator=(const node_table &) = delete; // copy assignment
    node_table &operator=(node_table &&) = delete;      // move assignment

    ~node_table() {
    {% for f in t.fields %}
    free_mem(&{{ f.name }});
    {% endfor %}
  }
} ;

struct node {
    node_table *n;
    node_index_type i;

    node(node_table *nn, node_index_type ii):
    n{nn}, i{ii} {}
};

struct nodeset {
    uint8_t *p;
    size_type size;

    nodeset(const size_type n):
    p{nullptr}, size{0} {
        p = alloc_mem<uint8_t>(n);
        size = n;
    }

    ~nodeset() {
        free_mem(&p);
        size = 0;
    }
};
{% endmacro %}

{% macro edge_table(t) %}
size_type get_num_edges(const H5::H5File &file) {
    return get_attribute<size_type>(file, "num_edges");
}

struct edge_table {
    {% for f in t.fields %}
    {{ f.type }}* {{ f.name }};
    {% endfor %}
    {{ t.target_node_idx.type }}* target_node_idx;
    {{ t.source_node_idx.type }}* source_node_idx;

    edge_table(const H5::H5File &file, const size_type num_edges):
    {% set comma = joiner(", ") %}
    {% for f in t.fields %}
    {{ comma() }}{{ f.name }}{nullptr}
    {% endfor %}
    {
        {% for f in t.fields %}
        {{ f.name }} = alloc_mem<{{ f.type }}>(num_edges);
        {% endfor %}
        target_node_idx = alloc_mem<{{ t.target_node_idx.type }}>(num_edges);
        source_node_idx = alloc_mem<{{ t.source_node_idx.type }}>(num_edges);

        {% for f in t.fields %}
        {% if f.is_static %}
        read_dataset(file, "{{ f.dataset_name }}", {{ f.h5_type}}, num_edges, {{ f.name }});
        {% endif %}
        {% endfor %}
        read_dataset(file, "{{ t.target_node_idx.dataset_name }}", {{ t.target_node_idx.h5_type}}, num_edges, target_node_idx);
        read_dataset(file, "{{ t.source_node_idx.dataset_name }}", {{ t.source_node_idx.h5_type}}, num_edges, source_node_idx);
    }

    edge_table() = delete;                              // default constructor
    edge_table(const edge_table &) = delete;            // copy constructor
    edge_table(edge_table &&) = delete;                 // move constructor
    edge_table &operator=(const edge_table &) = delete; // copy assignment
    edge_table &operator=(edge_table &&) = delete;      // move assignment

    ~edge_table() {
    {% for f in t.fields %}
    free_mem(&{{ f.name }});
    {% endfor %}
    free_mem(&target_node_idx);
    free_mem(&source_node_idx);
  }
} ;

struct edge {
    edge_table *e;
    node_table *n;
    edge_index_type i;

    edge(edge_table *ee, node_table *nn, edge_index_type ii):
    e{ee}, n{nn}, i{ii} {}
};

struct edgeset {
    uint8_t *p;
    size_type size;

    edgeset(const size_type n):
    p{nullptr}, size{0} {
        p = alloc_mem<uint8_t>(n);
        size = n;
    }

    ~edgeset() {
        free_mem(&p);
        size = 0;
    }
};
{% endmacro %}


{% macro constant_dist(d) %}
float_type {{ d.name }}(rnd_state_type *const rnd) {
    return {{ d.v }} ;
}
{% endmacro %}

{% macro discrete_dist(d) %}
{% set comma = joiner(", ") %}
const float_type {{ d.name }}_PROBS[] = { {% for p in d.probs %}{{ comma() }}{{ p }}{% endfor %} };
{% set comma = joiner(", ") %}
const size_type {{ d.name }}_ALIAS[] = { {% for a in d.alias %}{{ comma() }}{{ a }}{% endfor %} };
{% set comma = joiner(", ") %}
const float_type {{ d.name }}_VS[] = { {% for v in d.vs %}{{ comma() }}{{ v }}{% endfor %} };
std::uniform_int_distribution<size_type> {{ d.name }}_INDEX_DIST { 0, {{ d.probs|length - 1 }} };

float_type {{ d.name }}(rnd_state_type *const rnd) {
    auto i = {{ d.name }}_INDEX_DIST(*rnd);
    const auto u = uniform01(*rnd);

    if ({{ d.name }}_PROBS[i] < u) {
        i = {{ d.name }}_ALIAS[i];
    }

    return {{ d.name }}_VS[i];
}
{% endmacro %}

{% macro normal_dist(d) %}
std::normal_distribution<float_type> {{ d.name }}_NORMAL_DIST { {{ d.mean }}, {{ d.std }} };

float_type {{ d.name }}(rnd_state_type *const rnd) {
    auto ret = {{ d.name }}_NORMAL_DIST(*rnd);
    if (ret > {{ d.max }}) {
        ret = {{ d.max }};
    }
    if (ret < {{ d.min }}) {
        ret = {{ d.min }};
    }
    return ret;
}
{% endmacro %}

{% macro uniform_dist(d) %}
std::uniform_real_distribution<float_type> {{ d.name }}_UNIFORM_DIST { {{ d.low }}, {{ d.high }} };

float_type {{ d.name }}(rnd_state_type *const rnd) {
    return {{ d.name }}_UNIFORM_DIST(*rnd);
}
{% endmacro %}

{% macro multi_exit_transition_vars(t) %}
{% set comma = joiner(", ") %}
const float_type {{ t.name }}_PROBS[] = { {% for p in t.probs %}{{ comma() }}{{ p }}{% endfor %} };
{% set comma = joiner(", ") %}
const size_type {{ t.name }}_ALIAS[] = { {% for a in t.alias %}{{ comma() }}{{ a }}{% endfor %} };
std::uniform_int_distribution<size_type> {{ t.name }}_INDEX_DIST { 0, {{ t.probs|length - 1 }} };
{% endmacro %}

{% macro do_transition(dt) %}
{% for t in dt.multi %}
{{ multi_exit_transition_vars(t) }}
{% endfor %}

void
{{ dt.name }}_kernel(const size_type i, node_table *const nt, rnd_state_type *const rnd, const float_type elapsed) {
    auto state = nt->{{ dt.state }}[i];
    auto next_state = nt->{{ dt.next_state }}[i];
    auto dwell_time = nt->{{ dt.dwell_time }}[i];

    // Nothing has changed
    if (state == next_state) {
        return;
    }

    dwell_time -= elapsed;
    if (dwell_time > 0.0) {
        nt->{{ dt.dwell_time }}[i] = dwell_time;
        return;
    }

    state = next_state;
    dwell_time = 0.0;

    switch (state) {
    {% for t in dt.single %}
    case {{ t.entry }}:
        next_state = {{ t.exit }};
        dwell_time = {{ t.dwell_dist }}(rnd);
        break;
    {% endfor %}
    {% for t in dt.multi %}
    case {{ t.entry }}:
        {
            auto i = {{ t.name }}_INDEX_DIST(*rnd);
            const auto u = uniform01(*rnd);

            if ({{ t.name }}_PROBS[i] < u) {
                i = {{ t.name }}_ALIAS[i];
            }

            switch (i) {
            {% for j in range(t.probs|length) %}
            case {{ j }}:
                next_state = {{ t.exits[j] }};
                dwell_time = {{ t.dwell_dists[j] }}(rnd);
                break;
            {% endfor %}
            }
        }
        break;
    {% endfor %}
    }

    nt->{{ dt.state }}[i] = state;
    nt->{{ dt.next_state }}[i] = next_state;
    nt->{{ dt.dwell_time }}[i] = dwell_time;
}

void
{{ dt.name }}(const float_type elapsed) {
    #pragma omp parallel
    {
        const auto thread_idx = omp_get_thread_num();
        const auto rnd = &(RND_STATE->rnd[thread_idx]);

        const auto start = NODE_RANGE->start(thread_idx);
        const auto end = NODE_RANGE->end(thread_idx);
        for (size_type i = start; i < end; i++) {
            {{ dt.name }}_kernel(i, NODE_TABLE, rnd, elapsed);
        }
    }
}

{% endmacro %}

{% macro do_transmission(dt) %}
void
{{ dt.name }}_update_tprob_kernel(const size_type i, node_table *const nt, edge_table *const et) {
    const auto v = et->target_node_idx[i];
    const auto u = et->source_node_idx[i];

    float_type tprob = {{ dt.enabled }}(edge(et, nt, i));
    tprob *= {{ dt.susceptibility }}(node(nt, v));
    tprob *= {{ dt.infectivity }}(node(nt, u));
    tprob *= {{ dt.transmissibility }}(edge(et, nt, u));
    if (tprob < 0.0) {
        tprob = 0.0;
    }
    if (tprob > 1.0) {
        tprob = 1.0;
    }

    et->{{ dt.tprob }}[i] = tprob;
}

void
{{ dt.name }}_transmit_kernel(const size_type v, node_table *const nt, edge_table *const et, in_inc_csr *const csr, rnd_state_type *const rnd) {
    const auto start = csr->indptr[v];
    const auto end = csr->indptr[v+1];

    float_type tprob_sum = 0.0;
    float_type tprob = 1.0;
    for (size_type i = start; i < end; i++) {
        auto p = et->{{ dt.tprob }}[i];
        tprob_sum += p;
        tprob *= (1.0 - p);
    }
    tprob = 1.0 - tprob;

    auto prob = uniform01(*rnd);
    if (prob >= tprob) {
        nt->{{ dt.tsource }}[v] = NUM_EDGES;
        return;
    }

    auto esel = NUM_EDGES;
    auto esel_weight = uniform01(*rnd) * tprob_sum;
    tprob_sum = 0.0;
    for (size_type i = start; i < end; i++) {
        auto p = et->{{ dt.tprob }}[i];
        tprob_sum += p;
        if (tprob_sum >= esel_weight) {
            esel = i;
            break;
        }
    }
    assert(esel != NUM_EDGES);
    nt->{{ dt.tsource }}[v] = esel;

    const auto u = et->source_node_idx[esel];
    const auto t_state = nt->{{ dt.state }}[v];
    const auto u_state = nt->{{ dt.state }}[u];

    switch (t_state) {
    {% for entry, cxs in dt.transms %}
    case {{ entry }}:
            switch (u_state) {
            {% for contact, exit in cxs %}
            case {{ contact }}:
                nt->{{ dt.state }}[v] = {{ exit }};
                break;
            {% endfor %}
            }
        break;
    {% endfor %}
    }
}

void
{{ dt.name }}() {
    #pragma omp parallel
    {
        const auto thread_idx = omp_get_thread_num();
        const auto rnd = &(RND_STATE->rnd[thread_idx]);

        const auto e_start = EDGE_RANGE->start(thread_idx);
        const auto e_end = EDGE_RANGE->end(thread_idx);
        for (size_type i = e_start; i < e_end; i++) {
            {{ dt.name}}_update_tprob_kernel(i, NODE_TABLE, EDGE_TABLE);
        }

        const auto n_start = NODE_RANGE->start(thread_idx);
        const auto n_end = NODE_RANGE->end(thread_idx);
        for (size_type v = n_start; v < n_end; v++) {
            {{ dt.name}}_transmit_kernel(v, NODE_TABLE, EDGE_TABLE, IN_INC_CSR, rnd);
        }
    }
}
{% endmacro %}

{% macro function_params(params) %}
{% set comma = joiner(", ") %}
{% for name, type in params %}{{ comma() }}{{ type }} {{ name }}{% endfor %}
{% endmacro %}

{% macro function_decl(f) %}
{{ f.return_ }} {{ f.name}}({{ function_params(f.params) }});
{% endmacro %}

{% macro function_def(f) %}
{{ f.line }}
{{ f.return_ }} {{ f.name}}({{ function_params(f.params) }}) {
{% for name, type in f.variables %}
    {{ type }} {{ name }};
{% endfor %}
{% for name in f.nodesets %}
    nodeset {{ name }}(NUM_NODES);
{% endfor %}
{% for name in f.edgesets %}
    edgeset {{ name }}(NUM_EDGES);
{% endfor %}

{{ f.body }}
}
{% endmacro %}

{% macro simulator_cpp(s) %}
#include <cinttypes>
#include <cstdlib>
#include <cassert>
#include <iostream>
#include <vector>
#include <algorithm>
#include <random>
#include <chrono>
#include <omp.h>
#include <H5Cpp.h>

// ----------------------------------------------------------------------------
// Common utility methods
// ----------------------------------------------------------------------------


typedef {{ s.node_idx_type }} node_index_type;
typedef {{ s.edge_idx_type }} edge_index_type;
typedef uint64_t size_type;
typedef double float_type;
typedef std::mt19937 rnd_state_type;

{{ util_methods() }}

// ----------------------------------------------------------------------------
// Enumerations
// ----------------------------------------------------------------------------

{% for t in s.enums %}
{{ enum_type(t) }}
{% endfor %}

// ----------------------------------------------------------------------------
// Config variables
// ----------------------------------------------------------------------------

{% for c in s.configs %}
{{ config(c) }}
{% endfor %}

// ----------------------------------------------------------------------------
// Global variables
// ----------------------------------------------------------------------------

{% for v in s.variables %}
{{ global_variable(v) }}
{% endfor %}

// ----------------------------------------------------------------------------
// Incidence network (target_node_index, edge_index)
// ----------------------------------------------------------------------------

{{ in_inc_csr(s.in_inc_csr) }}

// ----------------------------------------------------------------------------
// Node table
// ----------------------------------------------------------------------------

{{ node_table(s.node_table) }}

// ----------------------------------------------------------------------------
// Edge table
// ----------------------------------------------------------------------------

{{ edge_table(s.edge_table) }}

// ----------------------------------------------------------------------------
// System global variables
// ----------------------------------------------------------------------------

rnd_state* RND_STATE = nullptr;
std::uniform_real_distribution<float_type> uniform01 { 0.0, 1.0 };

size_type NUM_NODES = 0;
size_type NUM_EDGES = 0;

in_inc_csr* IN_INC_CSR = nullptr;
thread_edge_range* EDGE_RANGE = nullptr;
thread_node_range* NODE_RANGE = nullptr;
node_table *NODE_TABLE = nullptr;
edge_table* EDGE_TABLE = nullptr;

H5::H5File* OUTPUT_FILE = nullptr;

// ----------------------------------------------------------------------------
// Constant distributions
// ----------------------------------------------------------------------------

{% for d in s.constant_dists %}
{{ constant_dist(d) }}
{% endfor %}

// ----------------------------------------------------------------------------
// Discrete distributions
// ----------------------------------------------------------------------------

{% for d in s.discrete_dists %}
{{ discrete_dist(d) }}
{% endfor %}

// ----------------------------------------------------------------------------
// Uniform distributions
// ----------------------------------------------------------------------------

{% for d in s.uniform_dists %}
{{ uniform_dist(d) }}
{% endfor %}

// ----------------------------------------------------------------------------
// Normal distributions
// ----------------------------------------------------------------------------

{% for d in s.normal_dists %}
{{ normal_dist(d) }}
{% endfor %}

// ----------------------------------------------------------------------------
// Function declarations
// ----------------------------------------------------------------------------

{% for f in s.functions %}
{{ function_decl(f) }}
{% endfor %}

// ----------------------------------------------------------------------------
// Contagion transition functions
// ----------------------------------------------------------------------------

{% for dt in s.do_transitions %}
{{ do_transition(dt) }}
{% endfor %}

// ----------------------------------------------------------------------------
// Contagion transmission functions
// ----------------------------------------------------------------------------

{% for dt in s.do_transmissions %}
{{ do_transmission(dt) }}
{% endfor %}

// ----------------------------------------------------------------------------
// Function definitions
// ----------------------------------------------------------------------------

{% for f in s.functions %}
{{ function_def(f) }}
{% endfor %}

// ----------------------------------------------------------------------------
// Main
// ----------------------------------------------------------------------------

int main() {
    const auto init_start{std::chrono::steady_clock::now()};
    const auto num_threads = omp_get_max_threads();
    std::cout << "### num_threads: " << num_threads << std::endl;

    rnd_state rnd;
    RND_STATE = &rnd;

    {% for c in s.configs %}
    {
        const char *p = std::getenv("{{ c.env_var }}");
        if (p) {
            {{ c.name }} = {{ c.from_str_fn }}(p);
        }
        std::cout << "### {{ c.print_name }} = " << std::to_string({{ c.name }}) << std::endl;
    }
    {% endfor %}

    const char *input_file_name = "input.h5";
    {
        const char *p = std::getenv("INPUT_FILE");
        if (p) {
            input_file_name = p;
        }
        std::cout << "### input_file = " << input_file_name << std::endl;
    }

    const char *output_file_name = "output.h5";
    {
        const char *p = std::getenv("OUTPUT_FILE");
        if (p) {
            output_file_name = p;
        }
        std::cout << "### output_file = " << output_file_name << std::endl;
    }

    H5::H5File input_file(input_file_name, H5F_ACC_RDONLY);

    NUM_NODES = get_num_nodes(input_file);
    std::cout << "### num_nodes: " << NUM_NODES << std::endl;

    NUM_EDGES = get_num_edges(input_file);
    std::cout << "### num_edges: " << NUM_EDGES << std::endl;

    in_inc_csr csr(input_file, NUM_NODES);
    IN_INC_CSR = &csr;

    thread_edge_range edge_range(NUM_EDGES, num_threads);
    EDGE_RANGE = &edge_range;

    thread_node_range node_range(csr.indptr, NUM_NODES, num_threads);
    NODE_RANGE = &node_range;

    node_table nt(input_file, NUM_NODES);
    NODE_TABLE = &nt;

    edge_table et(input_file, NUM_EDGES);
    EDGE_TABLE = &et;

    input_file.close();

    H5::H5File output_file(output_file_name, H5F_ACC_TRUNC);
    OUTPUT_FILE = &output_file;

    const auto init_end{std::chrono::steady_clock::now()};
    const std::chrono::duration<double> init_seconds{init_end - init_start};
    std::cout << "### setup time (s): " << init_seconds.count() << std::endl;

    const auto main_start{std::chrono::steady_clock::now()};
    do_main();
    const auto main_end{std::chrono::steady_clock::now()};
    const std::chrono::duration<double> main_seconds{main_end - main_start};
    std::cout << "### main time (s): " << main_seconds.count() << std::endl;

    output_file.close();
    OUTPUT_FILE = nullptr;

    return 0;
}
{% endmacro %}

{% macro cmake_lists(s) %}
cmake_minimum_required(VERSION 3.27)

project({{ s.module }} VERSION 0.0.1)

find_package(HDF5 REQUIRED COMPONENTS C CXX)
find_package(OpenMP REQUIRED COMPONENTS C CXX)

add_executable(simulator simulator.cpp)
target_link_libraries(simulator hdf5::hdf5 hdf5::hdf5_cpp OpenMP::OpenMP_CXX)
target_compile_features(simulator PRIVATE cxx_std_17)
{% endmacro %}


