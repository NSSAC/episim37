// module: {{ source.module }}

#include <cinttypes>
#include <cstdlib>
#include <cassert>
#include <iostream>
#include <vector>
#include <algorithm>
#include <random>
#include <omp.h>
#include <H5Cpp.h>
#include <fmt/core.h>
#include <sim_utils.h>

// ----------------------------------------------------------------------------
// Common types
// ----------------------------------------------------------------------------

{% for type in DEFERRED_TYPES %}
typedef {{ type.base_ctype }} {{ type.name }};
{% endfor %}

{% for type in DEFERRED_TYPES %}
const H5::PredType {{ type.h5_type }} = {{ type.base_h5_type }};
{% endfor %}

// ----------------------------------------------------------------------------
// Enumerations
// ----------------------------------------------------------------------------

{% for enum in source.enums %}
typedef {{ enum.base_type }} {{ enum.name }};
{% for const in enum.consts %}
const {{ enum.name }} {{ const }} = {{ loop.index0 }};
{% endfor %}

{% endfor %}

// ----------------------------------------------------------------------------
// Config variables
// ----------------------------------------------------------------------------

{% for config in source.configs %}
{{ config.type }} {{ config.name }} = {{ config.default }};

{% endfor %}

int_type NUM_TICKS = 0;
float_type TICK_ELAPSED = 1.0;

// ----------------------------------------------------------------------------
// Global variables
// ----------------------------------------------------------------------------

{% for global in source.globals %}
{{ global.type }} {{ global.name }} = {{ global.default }};

{% endfor %}

size_type NUM_THREADS = 0;
size_type NUM_NODES = 0;
size_type NUM_EDGES = 0;
int_type CUR_TICK = 0;

// ----------------------------------------------------------------------------
// Node and edge count getters
// ----------------------------------------------------------------------------

size_type get_num_nodes(const H5::H5File &file) {
    return get_attribute<size_type>(file, "num_nodes");
}

size_type get_num_edges(const H5::H5File &file) {
    return get_attribute<size_type>(file, "num_edges");
}

// ----------------------------------------------------------------------------
// Incidence network (target_node_index, edge_index)
// ----------------------------------------------------------------------------

struct in_inc_csr {
    StaticArray<edge_index_type> indptr;

    in_inc_csr(const H5::H5File &file):
    indptr{NUM_NODES + 1} {
        indptr.load(file, "{{ INC_CSR_INDPTR_DATASET_NAME }}", EDGE_INDEX_TYPE_H5_TYPE);
    }
} ;

in_inc_csr* IN_INC_CSR = nullptr;

// ----------------------------------------------------------------------------
// Thread to node range mapping
// ----------------------------------------------------------------------------

extern Range<node_index_type> THREAD_NODE_RANGE;
#pragma omp threadprivate(THREAD_NODE_RANGE)
Range<node_index_type> THREAD_NODE_RANGE;

void init_thread_node_range() {
    StaticArray<size_type> ptr{NUM_THREADS + 1};

    auto thread_load = NUM_NODES / NUM_THREADS;
    thread_load += (NUM_NODES % NUM_THREADS != 0);

    ptr[0] = 0;
    #pragma omp parallel
    {
        const auto thread_idx = omp_get_thread_num();
        auto end = thread_load * (thread_idx + 1);
        if (end > NUM_NODES) {
            end = NUM_NODES;
        }
        ptr[thread_idx +1] = end;
    }

    assert(ptr[0] == 0);
    assert(ptr[NUM_THREADS] == NUM_NODES);
    for (size_type i = 0; i < NUM_THREADS; i++) {
        assert(ptr[i] <= ptr[i+1]);
    }

    // for (size_type i = 0; i < NUM_THREADS; i++) {
    //    std::cout << "thread node count: " << i << " " << ptr[i+1] - ptr[i] << "\n";
    // }

    #pragma omp parallel
    {
        const auto thread_idx = omp_get_thread_num();
        const auto start = ptr[thread_idx];
        const auto end = ptr[thread_idx + 1];
        THREAD_NODE_RANGE = Range<node_index_type>(start, end);
    }
}

// ----------------------------------------------------------------------------
// Thread to edge range mapping
// ----------------------------------------------------------------------------

extern Range<edge_index_type> THREAD_EDGE_RANGE;
#pragma omp threadprivate(THREAD_EDGE_RANGE)
Range<edge_index_type> THREAD_EDGE_RANGE;

void init_thread_edge_range() {
    StaticArray<size_type> ptr{NUM_THREADS + 1};

    auto thread_load = NUM_EDGES / NUM_THREADS;
    thread_load += (NUM_EDGES % NUM_THREADS != 0);

    ptr[0] = 0;
    #pragma omp parallel
    {
        const auto thread_idx = omp_get_thread_num();
        auto end = thread_load * (thread_idx + 1);
        if (end > NUM_EDGES) {
            end = NUM_EDGES;
        }
        ptr[thread_idx +1] = end;
    }

    assert(ptr[0] == 0);
    assert(ptr[NUM_THREADS] == NUM_EDGES);
    for (size_type i = 0; i < NUM_THREADS; i++) {
        assert(ptr[i] <= ptr[i+1]);
    }

    // for (size_type i = 0; i < NUM_THREADS; i++) {
    //    std::cout << "thread edge count: " << i << " " << ptr[i+1] - ptr[i] << "\n";
    // }

    #pragma omp parallel
    {
        const auto thread_idx = omp_get_thread_num();
        const auto start = ptr[thread_idx];
        const auto end = ptr[thread_idx + 1];
        THREAD_EDGE_RANGE = Range<edge_index_type>(start, end);
    }
}


// ----------------------------------------------------------------------------
// Node table
// ----------------------------------------------------------------------------

struct node_table {
    {% for field in source.node_table.fields %}
    StaticArray<{{ field.type }}> {{ field.name }};
    {% endfor %}
    {% for contagion_name, state_type in source.node_table.contagions %}
    StaticArray<{{ state_type }}> {{ contagion_name }}_state;
    StaticArray<{{ state_type }}> {{ contagion_name }}_state_prev;
    StaticArray<{{ state_type }}> {{ contagion_name }}_next_state;
    StaticArray<float_type> {{ contagion_name }}_dwell_time;
    {% endfor %}

    node_table(const H5::H5File &file):
    {% set comma = joiner(",") %}
    {% for field in source.node_table.fields %}
    {{ comma() }}{{ field.name }}{NUM_NODES}
    {% endfor %}
    {% for contagion_name, _ in source.node_table.contagions %}
    {{ comma() }}{{ contagion_name }}_state{NUM_NODES}
    {{ comma() }}{{ contagion_name }}_state_prev{NUM_NODES}
    {{ comma() }}{{ contagion_name }}_next_state{NUM_NODES}
    {{ comma() }}{{ contagion_name }}_dwell_time{NUM_NODES}
    {% endfor %}
    {
        // initialize
        #pragma omp parallel
        {
            {% for field in source.node_table.fields %}
            {{ field.name }}.init(THREAD_NODE_RANGE);
            {% endfor %}
            {% for contagion_name, _ in source.node_table.contagions %}
            {{ contagion_name }}_state.init(THREAD_NODE_RANGE);
            {{ contagion_name }}_state_prev.init(THREAD_NODE_RANGE);
            {{ contagion_name }}_next_state.init(THREAD_NODE_RANGE);
            {{ contagion_name }}_dwell_time.init(THREAD_NODE_RANGE);
            {% endfor %}
        }

        // load the static fields
        {% for field in source.node_table.fields %}
        {% if field.is_static %}
        {{ field.name }}.load(file, "{{ field.dataset_name }}", {{ field.h5_type}});
        {% endif %}
        {% endfor %}
    }
} ;

node_table *NODE_TABLE = nullptr;

// ----------------------------------------------------------------------------
// Edge table
// ----------------------------------------------------------------------------

struct edge_table {
    {% for field in source.edge_table.fields %}
    StaticArray<{{ field.type }}> {{ field.name }};
    {% endfor %}
    {% for contagion_name in source.edge_table.contagions %}
    StaticArray<float_type> {{ contagion_name }}_transmission_prob;
    {% endfor %}
    StaticArray<node_index_type> target_node_index;
    StaticArray<node_index_type> source_node_index;

    edge_table(const H5::H5File &file):
    {% set comma = joiner(", ") %}
    {% for field in source.edge_table.fields %}
    {{ comma() }}{{ field.name }}{NUM_EDGES}
    {% endfor %}
    {% for contagion_name in source.edge_table.contagions %}
    {{ comma() }}{{ contagion_name }}_transmission_prob{NUM_EDGES}
    {% endfor %}
    , target_node_index{NUM_EDGES}
    , source_node_index{NUM_EDGES}
    {
        // initialize
        #pragma omp parallel
        {
            {% for field in source.edge_table.fields %}
            {{ field.name }}.init(THREAD_EDGE_RANGE);
            {% endfor %}
            {% for contagion_name in source.edge_table.contagions %}
            {{ contagion_name }}_transmission_prob.init(THREAD_EDGE_RANGE);
            {% endfor %}
            target_node_index.init(THREAD_EDGE_RANGE);
            source_node_index.init(THREAD_EDGE_RANGE);
        }

        // load static fields
        {% for field in source.edge_table.fields %}
        {% if field.is_static %}
        {{ field.name }}.load(file, "{{ field.dataset_name }}", {{ field.h5_type}});
        {% endif %}
        {% endfor %}
        target_node_index.load(file, "{{ TARGET_NODE_INDEX_DATASET_NAME }}", NODE_INDEX_TYPE_H5_TYPE);
        source_node_index.load(file, "{{ SOURCE_NODE_INDEX_DATASET_NAME }}", NODE_INDEX_TYPE_H5_TYPE);
    }
} ;

edge_table* EDGE_TABLE = nullptr;

// ----------------------------------------------------------------------------
// Contagion output containers
// ----------------------------------------------------------------------------

H5::H5File* OUTPUT_FILE = nullptr;

{% for co in source.contagion_outputs %}
struct {{ co.name }}_output {
    DynamicArrayList<node_index_type> transition_node_idx;
    DynamicArrayList<{{ co.state_type }}> transition_state;
    DynamicArrayList<edge_index_type> transmission_edge_idx;
    DynamicArrayList<{{ co.state_type }}> transmission_state;

    {{ co.name }}_output(const StaticArray<size_type>& thread_node_count):
            transition_node_idx{thread_node_count},
            transition_state{thread_node_count},
            transmission_edge_idx{thread_node_count},
            transmission_state{thread_node_count} {
        // initialize
        #pragma omp parallel
        {
            const auto thread_idx = omp_get_thread_num();
            transition_node_idx.init(thread_idx);
            transition_state.init(thread_idx);
            transmission_edge_idx.init(thread_idx);
            transmission_state.init(thread_idx);
        }
    }

    void reset_transitions(const size_type thread_idx) {
        transition_node_idx.clear(thread_idx);
        transition_state.clear(thread_idx);
    }

    void add_transition(
            const size_type thread_idx,
            const size_type v,
            const {{ co.state_type }} state) {
        transition_node_idx.append(thread_idx, v);
        transition_state.append(thread_idx, state);
    }

    void do_save_transitions(const std::string& transition_type) {
        auto group_name = fmt::format("/{{ co.print_name }}/{}/tick_{}", transition_type, CUR_TICK);
        create_group(*OUTPUT_FILE, group_name);

        {
            auto dataset_name = fmt::format("/{{ co.print_name }}/{}/tick_{}/node_index", transition_type, CUR_TICK);
            transition_node_idx.save(*OUTPUT_FILE, dataset_name, NODE_INDEX_TYPE_H5_TYPE);
        }

        {
            auto dataset_name = fmt::format("/{{ co.print_name }}/{}/tick_{}/state", transition_type, CUR_TICK);
            transition_state.save(*OUTPUT_FILE, dataset_name, {{ co.state_h5_type }});
        }
    }

    void save_interventions() {
        do_save_transitions("interventions");
    }

    void save_transitions() {
        do_save_transitions("transitions");
    }

    void reset_transmissions(const size_type thread_idx) {
        transmission_edge_idx.clear(thread_idx);
        transmission_state.clear(thread_idx);
    }

    void add_transmission(
            const size_type thread_idx,
            const size_type e,
            const {{ co.state_type }} state) {
        transmission_edge_idx.append(thread_idx, e);
        transmission_state.append(thread_idx, state);
    }

    void save_transmissions() {
        auto group_name = fmt::format("/{{ co.print_name }}/transmissions/tick_{}", CUR_TICK);
        create_group(*OUTPUT_FILE, group_name);

        {
            auto dataset_name = fmt::format("/{{ co.print_name }}/transmissions/tick_{}/edge_index", CUR_TICK);
            transmission_edge_idx.save(*OUTPUT_FILE, dataset_name, EDGE_INDEX_TYPE_H5_TYPE);
        }

        {
            auto dataset_name = fmt::format("/{{ co.print_name }}/transmissions/tick_{}/state", CUR_TICK);
            transmission_state.save(*OUTPUT_FILE, dataset_name, {{ co.state_h5_type }});
        }
    }
};

{{ co.name }}_output* {{ co.name }}_OUTPUT = nullptr;

{% endfor %}

// ----------------------------------------------------------------------------
// Random number generator
// ----------------------------------------------------------------------------

typedef std::mt19937 rnd_state_type;

extern rnd_state_type THREAD_RND_STATE;
#pragma omp threadprivate(THREAD_RND_STATE)
rnd_state_type THREAD_RND_STATE;

void init_thread_rnd_state() {
    // get the default random device
    std::random_device rd;

    // make seed generator using the random device
    std::seed_seq seq{rd(), rd(), rd(), rd(), rd()};

    // make seeds for each thread
    StaticArray<std::uint32_t> seeds(NUM_THREADS);
    seq.generate(seeds.begin(), seeds.end());

    // assign the seeds to each thread
    #pragma omp parallel
    {
        const auto thread_idx = omp_get_thread_num();
        THREAD_RND_STATE = rnd_state_type(seeds[thread_idx]);
    }
}

std::uniform_real_distribution<float_type> uniform01 { 0.0, 1.0 };

// ----------------------------------------------------------------------------
// Nodesets
// ----------------------------------------------------------------------------

struct nodeset {
    StaticArray<bool_type> is_in;
    size_type size;

    nodeset():
    is_in{NUM_NODES}, size{0} {
        #pragma omp parallel
        {
            is_in.init(THREAD_NODE_RANGE);
        }
    }
};

{% for name in source.nodesets %}
nodeset* {{ name }} = nullptr;
{% endfor %}

// ----------------------------------------------------------------------------
// Edgesets
// ----------------------------------------------------------------------------

struct edgeset {
    StaticArray<bool_type> is_in;
    size_type size;

    edgeset():
    is_in{NUM_EDGES}, size{0} {
        #pragma omp parallel
        {
            is_in.init(THREAD_EDGE_RANGE);
        }
    }
};

{% for name in source.edgesets %}
edgeset* {{ name }} = nullptr;
{% endfor %}

// ----------------------------------------------------------------------------
// Constant distributions
// ----------------------------------------------------------------------------

{% for d in source.constant_dists %}
float_type {{ d.name }}() {
    return {{ d.v }} ;
}
{% endfor %}

// ----------------------------------------------------------------------------
// Discrete distributions
// ----------------------------------------------------------------------------

{% for d in source.discrete_dists %}
{% set comma = joiner(", ") %}
const float_type {{ d.name }}_PROBS[] = { {% for p in d.probs %}{{ comma() }}{{ p }}{% endfor %} };
{% set comma = joiner(", ") %}
const size_type {{ d.name }}_ALIAS[] = { {% for a in d.alias %}{{ comma() }}{{ a }}{% endfor %} };
{% set comma = joiner(", ") %}
const float_type {{ d.name }}_VS[] = { {% for v in d.vs %}{{ comma() }}{{ v }}{% endfor %} };
std::uniform_int_distribution<size_type> {{ d.name }}_INDEX_DIST { 0, {{ d.probs|length - 1 }} };

float_type {{ d.name }}() {
    auto i = {{ d.name }}_INDEX_DIST(THREAD_RND_STATE);
    const auto u = uniform01(THREAD_RND_STATE);

    if ({{ d.name }}_PROBS[i] < u) {
        i = {{ d.name }}_ALIAS[i];
    }

    return {{ d.name }}_VS[i];
}
{% endfor %}

// ----------------------------------------------------------------------------
// Uniform distributions
// ----------------------------------------------------------------------------

{% for d in source.uniform_dists %}
std::uniform_real_distribution<float_type> {{ d.name }}_UNIFORM_DIST { {{ d.low }}, {{ d.high }} };

float_type {{ d.name }}() {
    return {{ d.name }}_UNIFORM_DIST(THREAD_RND_STATE);
}
{% endfor %}

// ----------------------------------------------------------------------------
// Normal distributions
// ----------------------------------------------------------------------------

{% for d in source.normal_dists %}
std::normal_distribution<float_type> {{ d.name }}_NORMAL_DIST { {{ d.mean }}, {{ d.std }} };

float_type {{ d.name }}() {
    auto ret = {{ d.name }}_NORMAL_DIST(THREAD_RND_STATE);
    if (ret > {{ d.max }}) {
        ret = {{ d.max }};
    }
    if (ret < {{ d.min }}) {
        ret = {{ d.min }};
    }
    return ret;
}
{% endfor %}

// ----------------------------------------------------------------------------
// Function declarations
// ----------------------------------------------------------------------------

{% for fn in source.functions %}
{% set comma = joiner(", ") %}
{{ fn.return_ }} {{ fn.name }}({% for name, type in fn.params %}{{ comma() }}{{ type }} {{ name }}{% endfor %});
{% endfor %}

// ----------------------------------------------------------------------------
// Contagion step function
// ----------------------------------------------------------------------------

{% for c in source.contagions %}

// alias table for transitions with multiple exits
{% for mt in c.transition.multi %}
{% set comma = joiner(", ") %}
const float_type {{ c.name }}_{{ mt.entry }}_transition_PROBS[] = { {% for p in mt.probs %}{{ comma() }}{{ p }}{% endfor %} };
{% set comma = joiner(", ") %}
const size_type {{ c.name }}_{{ mt.entry }}_transition_ALIAS[] = { {% for a in mt.alias %}{{ comma() }}{{ a }}{% endfor %} };
std::uniform_int_distribution<size_type> {{ c.name }}_{{ mt.entry }}_transition_INDEX_DIST { 0, {{ mt.probs|length - 1 }} };

{% endfor %}

void {{ c.name }}_transition_node(
        const size_type v,
        const float_type elapsed,
        const size_type thread_idx) {
    auto state = NODE_TABLE->{{ c.name }}_state[v];
    auto state_prev = NODE_TABLE->{{ c.name }}_state_prev[v];
    auto next_state = NODE_TABLE->{{ c.name }}_next_state[v];
    auto dwell_time = NODE_TABLE->{{ c.name }}_dwell_time[v];

    // Nothing has changed
    if (state == state_prev) {
        // Nothing will change
        if (state == next_state) {
            return;
        }

        dwell_time -= elapsed;
        // Nothing will change this tick
        if (dwell_time > 0.0) {
            NODE_TABLE->{{ c.name }}_dwell_time[v] = dwell_time;
            return;
        }
    }

    // state changed by transition
    if (state == state_prev) {
        state = next_state;
    }

    dwell_time = 0.0;
    {{ c.name }}_OUTPUT->add_transition(thread_idx, v, state);

    switch (state) {
    {% for st in c.transition.single %}
    case {{ st.entry }}:
        next_state = {{ st.exit }};
        dwell_time = {{ st.dwell_dist }}();
        break;
    {% endfor %}
    {% for mt in c.transition.multi %}
    case {{ mt.entry }}:
        {
            auto i = {{ c.name }}_{{ mt.entry }}_transition_INDEX_DIST(THREAD_RND_STATE);
            const auto u = uniform01(THREAD_RND_STATE);

            if ({{ c.name }}_{{ mt.entry }}_transition_PROBS[i] < u) {
                i = {{ c.name }}_{{ mt.entry }}_transition_ALIAS[i];
            }

            switch (i) {
            {% for j in range(mt.probs|length) %}
            case {{ j }}:
                next_state = {{ mt.exits[j] }};
                dwell_time = {{ mt.dwell_dists[j] }}();
                break;
            {% endfor %}
            }
        }
        break;
    {% endfor %}
    }

    NODE_TABLE->{{ c.name }}_state[v] = state;
    NODE_TABLE->{{ c.name }}_state_prev[v] = state;
    NODE_TABLE->{{ c.name }}_next_state[v] = next_state;
    NODE_TABLE->{{ c.name }}_dwell_time[v] = dwell_time;
}

void {{ c.name }}_update_transmission_prob() {
    for (auto e : THREAD_EDGE_RANGE) {
        const auto u = EDGE_TABLE->source_node_index[e];
        const auto v = EDGE_TABLE->target_node_index[e];

        float_type tprob = {{ c.transmission.susceptibility }}(v);
        if (tprob > 0) {
            tprob *= {{ c.transmission.infectivity }}(u);
        }

        EDGE_TABLE->{{ c.name }}_transmission_prob[e] = tprob;
    }

    for (auto e : THREAD_EDGE_RANGE) {
        auto tprob = EDGE_TABLE->{{ c.name }}_transmission_prob[e];
        if (tprob > 0) {
            tprob *= {{ c.transmission.transmissibility }}(e);
        }
        if (tprob > 0) {
            tprob *= {{ c.transmission.enabled }}(e);
        }

        EDGE_TABLE->{{ c.name }}_transmission_prob[e] = tprob;
    }
}

void {{ c.name }}_transmit(
        const size_type v,
        const size_type thread_idx) {
    const auto start = IN_INC_CSR->indptr[v];
    const auto end = IN_INC_CSR->indptr[v+1];

    float_type tprob_sum = 0.0;
    float_type tprob = 1.0;
    for (size_type e = start; e < end; e++) {
        auto p = EDGE_TABLE->{{ c.name }}_transmission_prob[e];
        tprob_sum += p;
        tprob *= (1.0 - p);
    }
    tprob = 1.0 - tprob;

    auto prob = uniform01(THREAD_RND_STATE);
    if (prob >= tprob) {
        return;
    }

    auto esel = NUM_EDGES;
    auto esel_weight = uniform01(THREAD_RND_STATE) * tprob_sum;
    tprob_sum = 0.0;
    for (size_type e = start; e < end; e++) {
        auto p = EDGE_TABLE->{{ c.name }}_transmission_prob[e];
        tprob_sum += p;
        if (tprob_sum >= esel_weight) {
            esel = e;
            break;
        }
    }
    assert(esel != NUM_EDGES);

    const auto u = EDGE_TABLE->source_node_index[esel];
    const auto v_state = NODE_TABLE->{{ c.name }}_state_prev[v];
    const auto u_state = NODE_TABLE->{{ c.name }}_state_prev[u];

    switch (v_state) {
    {% for entry, xs in c.transmission.transms %}
    case {{ entry }}:
            switch (u_state) {
            {% for exit, contacts in xs %}
            {% for contact in contacts %}
            case {{ contact }}:
            {% endfor %}
                NODE_TABLE->{{ c.name }}_state[v] = {{ exit }};
                {{ c.name }}_OUTPUT->add_transmission(thread_idx, esel, {{ exit }});
                break;
            {% endfor %}
            }
        break;
    {% endfor %}
    }
}

void {{ c.name }}_save_state_count() {
    size_type state_count[{{ c.num_states }}] = {0};

    #pragma omp parallel
    {
        size_type thread_state_count[{{ c.num_states }}] = {0};

        for (auto v : THREAD_NODE_RANGE) {
            thread_state_count[NODE_TABLE->{{ c.name }}_state[v]] += 1;
        }

        #pragma omp critical
        {
            for (size_type i = 0; i < {{ c.num_states }}; i++) {
                state_count[i] += thread_state_count[i];
            }
        }
    }

    hsize_t dims[1] = { {{ c.num_states }} };
    H5::DataSpace dataspace(1, dims);

    auto dataset_name = fmt::format("/{{ c.print_name }}/state_count/tick_{}", CUR_TICK);
    H5::DataSet dataset = OUTPUT_FILE->createDataSet(dataset_name, SIZE_TYPE_H5_TYPE, dataspace);
    dataset.write(state_count, SIZE_TYPE_H5_TYPE);

    dataset.close();
    dataspace.close();
}

void {{ c.name }}_step() {
    #pragma omp parallel
    {
        const auto thread_idx = omp_get_thread_num();

        // First we do transitions caused by interventions

        {{ c.name }}_OUTPUT->reset_transitions(thread_idx);

        for (auto v : THREAD_NODE_RANGE) {
            {{ c.name }}_transition_node(v, 0.0, thread_idx);
        }

        #pragma omp barrier

        #pragma omp master
        {{ c.name }}_OUTPUT->save_interventions();

        // Second we do transmissions

        {{ c.name }}_update_transmission_prob();

        #pragma omp barrier

        {{ c.name }}_OUTPUT->reset_transmissions(thread_idx);
        for (auto v : THREAD_NODE_RANGE) {
            {{ c.name }}_transmit(v, thread_idx);
        }

        #pragma omp barrier

        #pragma omp master
        {{ c.name }}_OUTPUT->save_transmissions();

        // Third we do do transitions caused by progression

        {{ c.name }}_OUTPUT->reset_transitions(thread_idx);

        for (auto v : THREAD_NODE_RANGE) {
            {{ c.name }}_transition_node(v, TICK_ELAPSED, thread_idx);
        }

        #pragma omp barrier

        #pragma omp master
        {
            {{ c.name }}_OUTPUT->save_transitions();
            {{ c.name }}_save_state_count();
        }
    }
}

{% endfor %}

// ----------------------------------------------------------------------------
// Device functions
// ----------------------------------------------------------------------------

{% for f in source.select_using_node %}
void {{ f.name }}() {
    {{ f.set_name }}->size = 0;

    #pragma omp parallel
    {
        size_type size = 0;
        for (auto v : THREAD_NODE_RANGE) {
            const auto b = {{ f.function_name }}(v);
            {{ f.set_name }}->is_in[v] = b;
            size += b;
        }

        #pragma omp atomic
        {{ f.set_name }}->size += size;
    }

    // std::cout << "{{ f.name }} " << {{ f.set_name }}->size << std::endl;
}
{% endfor %}

{% for f in source.select_using_edge %}
void {{ f.name }}() {
    {{ f.set_name }}->size = 0;

    #pragma omp parallel
    {
        size_type size = 0;
        for (auto e : THREAD_EDGE_RANGE) {
            const auto b = {{ f.function_name }}(edge_type(EDGE_TABLE, NODE_TABLE, e));
            {{ f.set_name }}->is_in[e] = b;
            size += b;
        }

        #pragma omp atomic
        {{ f.set_name }}->size += size;
    }

    // std::cout << "{{ f.name }} " << {{ f.set_name }}->size << std::endl;
}
{% endfor %}

{% for f in source.select_approx_node %}
void {{ f.name }}() {
    {{ f.set_name }}->size = 0;
    const float_type prob = float_type({{ f.amount }}) / {{ f.parent_set_name }}->size;

    #pragma omp parallel
    {
        size_type size = 0;
        for (auto v : THREAD_NODE_RANGE) {
            {{ f.set_name }}->is_in[v] = 0;
            if ({{ f.parent_set_name }}->is_in[v]) {
                const auto p = uniform01(THREAD_RND_STATE);
                if (p < prob) {
                    {{ f.set_name }}->is_in[v] = 1;
                    size += 1;
                }
            }
        }

        #pragma omp atomic
        {{ f.set_name }}->size += size;
    }

    // std::cout << "{{ f.name }} " << {{ f.set_name }}->size << std::endl;
}
{% endfor %}

{% for f in source.select_approx_edge %}
void {{ f.name }}() {
    {{ f.set_name }}->size = 0;
    const float_type prob = float_type({{ f.amount }}) / {{ f.parent_set_name }}->size;

    #pragma omp parallel
    {
        size_type size = 0;
        for (auto e : THREAD_EDGE_RANGE) {
            {{ f.set_name }}->is_in[e] = 0;
            if ({{ f.parent_set_name }}->is_in[e]) {
                const auto p = uniform01(THREAD_RND_STATE);
                if (p < prob) {
                    {{ f.set_name }}->p[e] = 1;
                    size += 1;
                }
            }
        }

        #pragma omp atomic
        {{ f.set_name }}->size += size;
    }

    // std::cout << "{{ f.name }} " << {{ f.set_name }}->size << std::endl;
}
{% endfor %}

{% for f in source.select_relative_node %}
void {{ f.name }}() {
    {{ f.set_name }}->size = 0;
    #pragma omp parallel
    {
        size_type size = 0;
        for (auto v : THREAD_NODE_RANGE) {
            {{ f.set_name }}->is_in[v] = 0;
            if ({{ f.parent_set_name }}->is_in[v]) {
                const auto p = uniform01(THREAD_RND_STATE);
                if (p < {{ f.amount }}) {
                    {{ f.set_name }}->is_in[v] = 1;
                    size += 1;
                }
            }
        }

        #pragma omp atomic
        {{ f.set_name }}->size += size;
    }

    // std::cout << "{{ f.name }} " << {{ f.set_name }}->size << std::endl;
}
{% endfor %}

{% for f in source.select_relative_edge %}
void {{ f.name }}() {
    {{ f.set_name }}->size = 0;

    #pragma omp parallel
    {
        size_type size = 0;
        for (auto e : THREAD_EDGE_RANGE) {
            {{ f.set_name }}->is_in[e] = 0;
            if ({{ f.parent_set_name }}->is_in[e]) {
                const auto p = uniform01(THREAD_RND_STATE);
                if (p < {{ f.amount }}) {
                    {{ f.set_name }}->is_in[e] = 1;
                    size += 1;
                }
            }
        }

        #pragma omp atomic
        {{ f.set_name }}->size += size;
    }

    // std::cout << "{{ f.name }} " << {{ f.set_name }}->size << std::endl;
}
{% endfor %}

{% for f in source.foreach_node_statement %}
void {{ f.name }}() {
    #pragma omp parallel
    {
        for (auto v: THREAD_NODE_RANGE) {
            if ({{ f.set_name }}->is_in[v]) {
               {{ f.function_name }}(v);
            }
        }
    }
}
{% endfor %}

{% for f in source.foreach_edge_statement %}
void {{ f.name }}() {
    #pragma omp parallel
    {
        for (auto e : THREAD_EDGE_RANGE) {
            if ({{ f.set_name }}->is_in[e]) {
               {{ f.function_name }}(e);
            }
        }
    }
}
{% endfor %}

// ----------------------------------------------------------------------------
// Function definitions
// ----------------------------------------------------------------------------

{% for f in source.functions %}
{% set comma = joiner(", ") %}
{{ f.line }}
{{ f.return_ }} {{ f.name}}({% for name, type in f.params %}{{ comma() }}{{ type }} {{ name }}{% endfor %}) {
{% for name, type in f.variables %}
    {{ type }} {{ name }};
{% endfor %}

{{ f.body }}
}
{% endfor %}

// ----------------------------------------------------------------------------
// Main
// ----------------------------------------------------------------------------

int main() {
    const auto main_start = omp_get_wtime();

    NUM_THREADS = omp_get_max_threads();
    fmt::print("### num_threads = {}\n", NUM_THREADS);

    {% for config in source.configs %}
    {
        const char *p = std::getenv("{{ config.env_var }}");
        if (p) {
            {{ config.name }} = {{ config.from_str_fn }}(p);
        }
        fmt::print("### {{ config.print_name }} = {}\n", {{ config.name }});
    }
    {% endfor %}
    {
        const char *p = std::getenv("NUM_TICKS");
        if (p) {
            NUM_TICKS = std::stol(p);
        }
        fmt::print("### num_ticks = {}\n", NUM_TICKS);
    }

    const char *input_file_name = "input.h5";
    {
        const char *p = std::getenv("INPUT_FILE");
        if (p) {
            input_file_name = p;
        }
        fmt::print("### input_file = {}\n", input_file_name);
    }

    const char *output_file_name = "output.h5";
    {
        const char *p = std::getenv("OUTPUT_FILE");
        if (p) {
            output_file_name = p;
        }
        fmt::print("### output_file = {}\n", output_file_name);
    }


    H5::H5File input_file(input_file_name, H5F_ACC_RDONLY);

    NUM_NODES = get_num_nodes(input_file);
    fmt::print("### num_nodes = {}\n", NUM_NODES);

    NUM_EDGES = get_num_edges(input_file);
    fmt::print("### num_edges = {}\n", NUM_EDGES);

    in_inc_csr csr(input_file);
    IN_INC_CSR = &csr;

    init_thread_node_range();
    init_thread_edge_range();

    node_table nt(input_file);
    NODE_TABLE = &nt;

    edge_table et(input_file);
    EDGE_TABLE = &et;

    input_file.close();

    H5::H5File output_file(output_file_name, H5F_ACC_TRUNC);
    OUTPUT_FILE = &output_file;

    {
        H5::DataSpace dataspace(H5S_SCALAR);
        H5::Attribute attribute;

        attribute = output_file.createAttribute("num_ticks", INT_TYPE_H5_TYPE, dataspace);
        attribute.write(INT_TYPE_H5_TYPE, &NUM_TICKS);
        attribute.close();

        dataspace.close();
    }

    {% for co in source.contagion_outputs %}
    {
        create_group(output_file, "/{{ co.print_name }}");
        create_group(output_file, "/{{ co.print_name }}/interventions");
        create_group(output_file, "/{{ co.print_name }}/transitions");
        create_group(output_file, "/{{ co.print_name }}/transmissions");
        create_group(output_file, "/{{ co.print_name }}/state_count");
    }

    StaticArray<size_type> thread_node_count(NUM_THREADS);
    #pragma omp parallel
    {
        const auto thread_idx = omp_get_thread_num();
        #pragma omp critical
        {
            thread_node_count[thread_idx] = THREAD_NODE_RANGE.size();
        }
    }

    {{ co.name }}_output {{ co.name }}_out(thread_node_count);
    {{ co.name }}_OUTPUT = &{{ co.name }}_out;
    {% endfor %}

    init_thread_rnd_state();

    {% for name in source.nodesets %}
    nodeset {{ name }}_;
    {{ name }} = &{{ name }}_;
    {% endfor %}

    {% for name in source.edgesets %}
    edgeset {{ name }}_;
    {{ name }} = &{{ name }}_;
    {% endfor %}


    CUR_TICK = -1;
    fmt::print("### cur_tick = {}\n", CUR_TICK);
    do_initialize();

    {% for c in source.contagions %}
    {{ c.name }}_step();
    {% endfor %}

    for (CUR_TICK = 0; CUR_TICK < NUM_TICKS; CUR_TICK++) {
        fmt::print("### cur_tick = {}\n", CUR_TICK);
        do_intervene();

        {% for c in source.contagions %}
        {{ c.name }}_step();
        {% endfor %}
    }
    output_file.close();
    OUTPUT_FILE = nullptr;

    const auto main_end = omp_get_wtime();

    fmt::print("### mem_use_gb = {:g}\n", double(TOTAL_ALLOC) / 1e9);
    fmt::print("### runtime_s = {:g}\n", main_end - main_start);

    return 0;
}
